{"version":3,"sources":["components/Header.js","components/Stats.js","components/CoronaData.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","windowGlobal","window","useState","pageYOffset","position","setPosition","visible","setVisible","useEffect","handleScroll","temp","addEventListener","removeEventListener","handleSidebar","navToggle","document","getElementById","sidebarNav","classList","toggle","className","id","aria-label","onClick","href","Stats","obj","active","confirmed","deaths","lastupdatedtime","recovered","state","end","parseInt","CoronaData","statewiseData","setStatewiseData","setIndiaData","api","a","fetch","response","json","then","statewise","data","console","log","fetchData","statewiseInfo","indiaInfo","statewiseArr","Object","values","indiaStats","map","item","index","key","renderCoronaStats","Footer","target","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b122b21d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport \"./Header.css\"\r\n\r\nconst Header = () => {\r\n  const windowGlobal = typeof window !== \"undefined\" && window\r\n  let [position, setPosition] = useState(windowGlobal.pageYOffset)\r\n  let [visible, setVisible] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      let temp = windowGlobal.pageYOffset\r\n\r\n      setVisible(position > temp)\r\n      setPosition(temp)\r\n    }\r\n    windowGlobal.addEventListener(\"scroll\", handleScroll)\r\n    return () => {\r\n      windowGlobal.removeEventListener(\"scroll\", handleScroll)\r\n    }\r\n  })\r\n\r\n  const handleSidebar = () => {\r\n    const navToggle = document.getElementById(\"nav-toggle\")\r\n    const sidebarNav = document.getElementById(\"nav-list\")\r\n    navToggle.classList.toggle(\"animate-toggle\")\r\n    sidebarNav.classList.toggle(\"active\")\r\n  }\r\n\r\n  return (\r\n    <header className={!visible ? \"hide-header-navbar\" : \"show-header-navbar\"}>\r\n      <nav id=\"navbar\">\r\n        <button\r\n          id=\"nav-toggle\"\r\n          aria-label=\"Navigation Menu Button\"\r\n          onClick={handleSidebar}\r\n        >\r\n          <div className=\"line\"></div>\r\n          <div className=\"line\"></div>\r\n          <div className=\"line\"></div>\r\n        </button>\r\n        <ul id=\"nav-list\">\r\n          <li>\r\n            <a href=\"/\" id=\"brand\">\r\n              COVID-19 Live Stats\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"#world\"\r\n              className=\"navlinks\"\r\n              aria-label=\"\"\r\n              onClick={handleSidebar}\r\n            >\r\n              World\r\n            </a>\r\n          </li>\r\n\r\n          <li>\r\n            <a\r\n              href=\"#resources\"\r\n              className=\"navlinks\"\r\n              aria-label=\"\"\r\n              onClick={handleSidebar}\r\n            >\r\n              Resources\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"#about\"\r\n              aria-label=\"\"\r\n              className=\"navlinks\"\r\n              onClick={handleSidebar}\r\n            >\r\n              About\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\nimport CountUp from \"react-countup\"\r\nimport \"./Stats.css\"\r\n\r\nexport const Stats = ({ obj }) => {\r\n  const { active, confirmed, deaths, lastupdatedtime, recovered, state } = obj\r\n\r\n  if (state === \"Total\") {\r\n    return (\r\n      <div id=\"india\">\r\n        <ul className=\"stats-list\">\r\n          <li className=\"country-india\">\r\n            {/* <span className=\"india-numbers\"> */}\r\n            India\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"confirmed-cases-india\">\r\n            Confirmed: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(confirmed)} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"active-cases-india\">\r\n            Active: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(active)} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"recovered-cases-india\">\r\n            Recovered: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(recovered)} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"deaths-india\">\r\n            Deaths: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(deaths)} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"last-updated\">Last Updated: {lastupdatedtime}</li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <ul className=\"states-stats-list\">\r\n      <li className=\"state-name\">{state === \"Total\" ? \"India\" : state}</li>\r\n      <li className=\"confirmed-cases\">Confirmed: {confirmed}</li>\r\n      <li className=\"active-cases\">Active: {active}</li>\r\n      <li className=\"recovered-cases\">Recovered: {recovered}</li>\r\n      <li className=\"deaths\">Deaths: {deaths}</li>\r\n    </ul>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { Stats } from \"./Stats\"\r\n\r\nexport const CoronaData = () => {\r\n  const [statewiseData, setStatewiseData] = useState()\r\n  const [indiaData, setIndiaData] = useState()\r\n  // const [loading, setLoading] = useState(false)\r\n\r\n  const api = \"https://api.covid19india.org/data.json\"\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(api)\r\n        // setLoading(true)\r\n\r\n        const data = await response\r\n          .json()\r\n          .then(({ statewise }) => [...statewise])\r\n        setStatewiseData(data)\r\n        setIndiaData(data[0])\r\n      } catch (err) {\r\n        // setLoading(null)\r\n        console.log(\"Error fetching: \", err)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [])\r\n\r\n  console.log(\"Coronadata mounted\")\r\n  // console.log(statewiseData)\r\n  // console.log(indiaData)\r\n\r\n  function renderCoronaStats() {\r\n    let statewiseInfo\r\n    let indiaInfo\r\n    if (statewiseData) {\r\n      let statewiseArr = Object.values(statewiseData)\r\n      let indiaStats = statewiseArr[0]\r\n      // console.log(statewiseArr)\r\n\r\n      statewiseInfo = statewiseArr.map((item, index) => {\r\n        if (index > 0) {\r\n          return <Stats key={index} obj={item} />\r\n        }\r\n      })\r\n\r\n      indiaInfo = <Stats key=\"India\" obj={indiaStats} />\r\n    }\r\n    return [indiaInfo, statewiseInfo]\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <ul> */}\r\n      {statewiseData ? renderCoronaStats() : <h3>loading...</h3>}\r\n      {/* </ul> */}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport \"./Footer.css\"\r\nexport const Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        Developed by{\" \"}\r\n        <a\r\n          href=\"https://github.com/abhishekakade\"\r\n          target=\"_blank\"\r\n          rel=\"nofollow noopener noreferrer\"\r\n          aria-label=\"Abhishek's GitHub Profile\"\r\n          className=\"tooltip profile-link\"\r\n        >\r\n          Abhishek\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  )\r\n}\r\n","import React from \"react\"\nimport \"./App.css\"\nimport Header from \"./components/Header\"\nimport { CoronaData } from \"./components/CoronaData\"\nimport { Footer } from \"./components/Footer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\">COVID-19 Live Stats</h1>\n      <Header />\n      <CoronaData />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}