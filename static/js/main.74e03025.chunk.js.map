{"version":3,"sources":["components/Header.js","components/Stats.js","components/CoronaData.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","windowGlobal","window","useState","pageYOffset","position","setPosition","visible","setVisible","useEffect","handleScroll","temp","addEventListener","removeEventListener","handleSidebar","navToggle","document","getElementById","sidebarNav","classList","toggle","className","id","aria-label","onClick","href","Stats","obj","active","confirmed","deaths","lastupdatedtime","recovered","state","end","parseInt","useEasing","CoronaData","statewiseData","setStatewiseData","indiaData","setIndiaData","showStates","setShowStates","api","a","fetch","response","json","then","statewise","data","console","log","fetchData","array","key","statewiseInfo","Object","values","map","item","index","renderIndianStatesData","Footer","target","rel","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mVAmFeA,G,MAhFA,WACb,IAAMC,EAAiC,qBAAXC,QAA0BA,OADnC,EAEWC,mBAASF,EAAaG,aAFjC,mBAEdC,EAFc,KAEJC,EAFI,OAGSH,oBAAS,GAHlB,mBAGdI,EAHc,KAGLC,EAHK,KAKnBC,qBAAU,WACR,IAAMC,EAAe,WACnB,IAAIC,EAAOV,EAAaG,YAExBI,EAAWH,EAAWM,GACtBL,EAAYK,IAGd,OADAV,EAAaW,iBAAiB,SAAUF,GACjC,WACLT,EAAaY,oBAAoB,SAAUH,OAI/C,IAAMI,EAAgB,WACpB,IAAMC,EAAYC,SAASC,eAAe,cACpCC,EAAaF,SAASC,eAAe,YAC3CF,EAAUI,UAAUC,OAAO,kBAC3BF,EAAWC,UAAUC,OAAO,WAG9B,OACE,4BAAQC,UAAYd,EAAiC,qBAAvB,sBAC5B,yBAAKe,GAAG,UACN,4BACEA,GAAG,aACHC,aAAW,yBACXC,QAASV,GAET,yBAAKO,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,UAEjB,wBAAIC,GAAG,YACL,4BACE,uBAAGG,KAAK,IAAIH,GAAG,SAAf,wBAIF,4BACE,uBACEG,KAAK,SACLJ,UAAU,WACVE,aAAW,GACXC,QAASV,GAJX,UAUF,4BACE,uBACEW,KAAK,aACLJ,UAAU,WACVE,aAAW,GACXC,QAASV,GAJX,cASF,4BACE,uBACEW,KAAK,SACLF,aAAW,GACXF,UAAU,WACVG,QAASV,GAJX,e,8CChECY,G,MAAQ,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACdC,EAAiED,EAAjEC,OAAQC,EAAyDF,EAAzDE,UAAWC,EAA8CH,EAA9CG,OAAQC,EAAsCJ,EAAtCI,gBAAiBC,EAAqBL,EAArBK,UAAWC,EAAUN,EAAVM,MAE/D,MAAc,UAAVA,EAEA,yBAAKX,GAAG,SACN,wBAAID,UAAU,cACZ,wBAAIA,UAAU,iBAAd,SAKA,wBAAIA,UAAU,yBAAd,cAEE,kBAAC,IAAD,CAASa,IAAKC,SAASN,GAAYO,WAAW,KAGhD,wBAAIf,UAAU,sBAAd,WAEE,kBAAC,IAAD,CAASa,IAAKC,SAASP,GAASQ,WAAW,KAG7C,wBAAIf,UAAU,yBAAd,cAEE,kBAAC,IAAD,CAASa,IAAKC,SAASH,GAAYI,WAAW,KAGhD,wBAAIf,UAAU,gBAAd,WAEE,kBAAC,IAAD,CAASa,IAAKC,SAASL,GAASM,WAAW,KAG7C,wBAAIf,UAAU,gBAAd,iBAA4CU,KAIzCI,SAASN,GAAa,EAE7B,wBAAIR,UAAU,qBACZ,wBAAIA,UAAU,cAAwB,UAAVY,EAAoB,QAAUA,GAC1D,wBAAIZ,UAAU,mBAAd,cAA4CQ,GAC5C,wBAAIR,UAAU,gBAAd,WAAsCO,GACtC,wBAAIP,UAAU,mBAAd,cAA4CW,GAC5C,wBAAIX,UAAU,UAAd,WAAgCS,IAGxB,OC9CHO,G,MAAa,WAAO,IAAD,EACYlC,qBADZ,mBACvBmC,EADuB,KACRC,EADQ,OAEIpC,qBAFJ,mBAEvBqC,EAFuB,KAEZC,EAFY,OAGMtC,oBAAS,GAHf,mBAGvBuC,EAHuB,KAGXC,EAHW,KAMxBC,EAAM,yCACZnC,qBAAU,WAAM,4CACd,8BAAAoC,EAAA,+EAE2BC,MAAMF,GAFjC,cAEUG,EAFV,gBAKuBA,EAChBC,OACAC,MAAK,gBAAGC,EAAH,EAAGA,UAAH,mBAAuBA,MAPnC,OAKUC,EALV,OAQIZ,EAAiBY,GACjBV,EAAaU,EAAK,IATtB,kDAYIC,QAAQC,IAAI,mBAAZ,MAZJ,2DADc,uBAAC,WAAD,wBAiBdC,KACC,IAMH,IAAwBC,EAkBxB,OACE,6BACGf,GApBmBe,EAoBSf,EAnBxB,kBAAC,EAAD,CAAOgB,IAAI,QAAQ7B,IAAK4B,KAmBa,0CAC1C,4BACEjC,GAAG,uBACHE,QAAS,WACMmB,GAAbD,KAGDA,EAAa,uBAAyB,wBAExCJ,GAAiBI,EAChB,oCACE,uBAAGrB,UAAU,oBAAb,8EAIA,yBAAKC,GAAG,oBA/BhB,WACE,IAAImC,EAUJ,OATInB,IAGFmB,EAFmBC,OAAOC,OAAOrB,GAEJsB,KAAI,SAACC,EAAMC,GACtC,GAAIA,EAAQ,EACV,OAAO,kBAAC,EAAD,CAAON,IAAKM,EAAOnC,IAAKkC,QAI9BJ,EAoB2BM,KAE5B,QCtEGC,G,MAAS,WACpB,OACE,gCACE,0CACe,IACb,uBACEvC,KAAK,mCACLwC,OAAO,SACPC,IAAI,+BACJ3C,aAAW,4BACXF,UAAU,wBALZ,aAUF,oCACS,IACP,uBACEI,KAAK,+CACLwC,OAAO,SACPC,IAAI,+BACJ3C,aAAW,iCACXF,UAAU,wBALZ,oBCFO8C,MAXf,WACE,OACE,yBAAK9C,UAAU,OACb,wBAAIC,GAAG,SAAP,uBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAA8C,EAAcC,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTzB,MAAK,SAAA8B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhD,QACf2C,UAAUC,cAAcO,YAI1BhC,QAAQC,IACN,iHAKEsB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB3B,QAAQC,IAAI,sCAGRsB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLpC,QAAQoC,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3E,SAASC,eAAe,SDYnB,SAAkB0D,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,iBAAwB3F,OAAOoE,SAAS7C,MACpDqE,SAAW5F,OAAOoE,SAASwB,OAIvC,OAGF5F,OAAOU,iBAAiB,QAAQ,WAC9B,IAAM8D,EAAK,UAAMmB,iBAAN,sBAEPzB,IAgEV,SAAiCM,EAAOC,GAEtC7B,MAAM4B,EAAO,CACXqB,QAAS,CAAE,iBAAkB,YAE5B9C,MAAK,SAAAF,GAEJ,IAAMiD,EAAcjD,EAASgD,QAAQE,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvB,UAAUC,cAAcuB,MAAMnD,MAAK,SAAA8B,GACjCA,EAAasB,aAAapD,MAAK,WAC7B/C,OAAOoE,SAASgC,eAKpB7B,EAAgBC,EAAOC,MAG1BY,OAAM,WACLnC,QAAQC,IACN,oEAvFAkD,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcuB,MAAMnD,MAAK,WACjCG,QAAQC,IACN,iHAMJoB,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.74e03025.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport \"./Header.css\"\r\n\r\nconst Header = () => {\r\n  const windowGlobal = typeof window !== \"undefined\" && window\r\n  let [position, setPosition] = useState(windowGlobal.pageYOffset)\r\n  let [visible, setVisible] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      let temp = windowGlobal.pageYOffset\r\n\r\n      setVisible(position > temp)\r\n      setPosition(temp)\r\n    }\r\n    windowGlobal.addEventListener(\"scroll\", handleScroll)\r\n    return () => {\r\n      windowGlobal.removeEventListener(\"scroll\", handleScroll)\r\n    }\r\n  })\r\n\r\n  const handleSidebar = () => {\r\n    const navToggle = document.getElementById(\"nav-toggle\")\r\n    const sidebarNav = document.getElementById(\"nav-list\")\r\n    navToggle.classList.toggle(\"animate-toggle\")\r\n    sidebarNav.classList.toggle(\"active\")\r\n  }\r\n\r\n  return (\r\n    <header className={!visible ? \"hide-header-navbar\" : \"show-header-navbar\"}>\r\n      <nav id=\"navbar\">\r\n        <button\r\n          id=\"nav-toggle\"\r\n          aria-label=\"Navigation Menu Button\"\r\n          onClick={handleSidebar}\r\n        >\r\n          <div className=\"line\"></div>\r\n          <div className=\"line\"></div>\r\n          <div className=\"line\"></div>\r\n        </button>\r\n        <ul id=\"nav-list\">\r\n          <li>\r\n            <a href=\"/\" id=\"brand\">\r\n              COVID-19 Live Stats\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"#world\"\r\n              className=\"navlinks\"\r\n              aria-label=\"\"\r\n              onClick={handleSidebar}\r\n            >\r\n              World\r\n            </a>\r\n          </li>\r\n\r\n          <li>\r\n            <a\r\n              href=\"#resources\"\r\n              className=\"navlinks\"\r\n              aria-label=\"\"\r\n              onClick={handleSidebar}\r\n            >\r\n              Resources\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"#about\"\r\n              aria-label=\"\"\r\n              className=\"navlinks\"\r\n              onClick={handleSidebar}\r\n            >\r\n              About\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\nimport CountUp from \"react-countup\"\r\nimport \"./Stats.css\"\r\n\r\nexport const Stats = ({ obj }) => {\r\n  const { active, confirmed, deaths, lastupdatedtime, recovered, state } = obj\r\n\r\n  if (state === \"Total\") {\r\n    return (\r\n      <div id=\"india\">\r\n        <ul className=\"stats-list\">\r\n          <li className=\"country-india\">\r\n            {/* <span className=\"india-numbers\"> */}\r\n            India\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"confirmed-cases-india\">\r\n            Confirmed: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(confirmed)} useEasing={false} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"active-cases-india\">\r\n            Active: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(active)} useEasing={false} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"recovered-cases-india\">\r\n            Recovered: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(recovered)} useEasing={false} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"deaths-india\">\r\n            Deaths: {/* <span className=\"india-numbers\"> */}\r\n            <CountUp end={parseInt(deaths)} useEasing={false} />\r\n            {/* </span> */}\r\n          </li>\r\n          <li className=\"last-updated\">Last Updated: {lastupdatedtime}</li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  } else if (parseInt(confirmed) > 0) {\r\n    return (\r\n      <ul className=\"states-stats-list\">\r\n        <li className=\"state-name\">{state === \"Total\" ? \"India\" : state}</li>\r\n        <li className=\"confirmed-cases\">Confirmed: {confirmed}</li>\r\n        <li className=\"active-cases\">Active: {active}</li>\r\n        <li className=\"recovered-cases\">Recovered: {recovered}</li>\r\n        <li className=\"deaths\">Deaths: {deaths}</li>\r\n      </ul>\r\n    )\r\n  } else return null\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { Stats } from \"./Stats\"\r\nimport \"./CoronaData.css\"\r\n\r\nexport const CoronaData = () => {\r\n  const [statewiseData, setStatewiseData] = useState()\r\n  const [indiaData, setIndiaData] = useState()\r\n  const [showStates, setShowStates] = useState(false)\r\n  // const [loading, setLoading] = useState(false)\r\n\r\n  const api = \"https://api.covid19india.org/data.json\"\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(api)\r\n        // setLoading(true)\r\n\r\n        const data = await response\r\n          .json()\r\n          .then(({ statewise }) => [...statewise])\r\n        setStatewiseData(data)\r\n        setIndiaData(data[0])\r\n      } catch (err) {\r\n        // setLoading(null)\r\n        console.log(\"Error fetching: \", err)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [])\r\n\r\n  // console.log(\"Coronadata mounted\")\r\n  // console.log(statewiseData)\r\n  // console.log(indiaData)\r\n\r\n  const renderIndiaData = array => {\r\n    return <Stats key=\"India\" obj={array} />\r\n  }\r\n\r\n  function renderIndianStatesData() {\r\n    let statewiseInfo\r\n    if (statewiseData) {\r\n      let statewiseArr = Object.values(statewiseData)\r\n\r\n      statewiseInfo = statewiseArr.map((item, index) => {\r\n        if (index > 0) {\r\n          return <Stats key={index} obj={item} />\r\n        }\r\n      })\r\n    }\r\n    return statewiseInfo\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {indiaData ? renderIndiaData(indiaData) : <h3>loading...</h3>}\r\n      <button\r\n        id=\"states-toggle-button\"\r\n        onClick={() => {\r\n          showStates ? setShowStates(false) : setShowStates(true)\r\n        }}\r\n      >\r\n        {showStates ? \"Hide State wise Info\" : \"Show State wise Info\"}\r\n      </button>\r\n      {statewiseData && showStates ? (\r\n        <>\r\n          <p className=\"show-states-note\">\r\n            (Note: states without any reported/confirmed COVID-19 cases not\r\n            displayed)\r\n          </p>\r\n          <div id=\"states-container\">{renderIndianStatesData()}</div>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport \"./Footer.css\"\r\nexport const Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        Developed by{\" \"}\r\n        <a\r\n          href=\"https://github.com/abhishekakade\"\r\n          target=\"_blank\"\r\n          rel=\"nofollow noopener noreferrer\"\r\n          aria-label=\"Abhishek's GitHub Profile\"\r\n          className=\"tooltip profile-link\"\r\n        >\r\n          Abhishek\r\n        </a>\r\n      </p>\r\n      <p>\r\n        API by{\" \"}\r\n        <a\r\n          href=\"https://github.com/covid19india/covid19india\"\r\n          target=\"_blank\"\r\n          rel=\"nofollow noopener noreferrer\"\r\n          aria-label=\"covid19india GitHub repository\"\r\n          className=\"tooltip profile-link\"\r\n        >\r\n          covid19india\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  )\r\n}\r\n","import React from \"react\"\nimport \"./App.css\"\nimport Header from \"./components/Header\"\nimport { CoronaData } from \"./components/CoronaData\"\nimport { Footer } from \"./components/Footer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\">COVID-19 Live Stats</h1>\n      <Header />\n      <CoronaData />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}